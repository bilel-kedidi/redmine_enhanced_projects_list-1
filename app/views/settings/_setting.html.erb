<%
  if @settings['sorting_name'] and @settings['sorting_name'].include?('cf')
    Project.update_all({custom_value_content: nil})
    Project.joins('LEFT JOIN custom_values on projects.id = custom_values.customized_id ').
        where("custom_values.custom_field_id = #{@settings['sorting_name'][3..-1]}").
        where(custom_values: {customized_type: 'Project'}).
        where.not(custom_values: {value: [nil, '']}).
        update_all("projects.custom_value_content = custom_values.value")
    Project.joins('LEFT JOIN custom_values on projects.id = custom_values.customized_id ').
        where("custom_values.custom_field_id = #{@settings['sorting_name'][3..-1]}").
        where(custom_values: {customized_type: 'Project'}).
        where(custom_values: {value: [nil, '']}).
        update_all("projects.custom_value_content = 'zzzzzzzzzzzzzzzzzzzzz'")
  end
  Project.change_act_as_nested
  Project.update_all({order_lft: nil, order_rgt: nil})
  Project.rebuild!
%>
<div class="">
  <p>
    Sort by <% array = Project.column_names.reject{|col| ['id', 'lft', 'rgt','parent_id', "order_lft", 'order_rgt'].include? col}.
      map{|column| [l("field_#{column}".to_sym),  "project_#{column}" ]}
               ProjectCustomField.where(multiple: false).map{|cf| [cf.name, "cf_#{cf.id}" ]}.each do |v|
                 array << v
               end
  %>

    <%= select_tag("settings[sorting_name]", options_for_select(array.compact, selected: @settings['sorting_name'] )) %>
  </p>
</div>